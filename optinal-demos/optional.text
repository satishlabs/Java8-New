
 final class Optional<T> {
   static <T> Optional<T> empty();
   static <T> Optional<T> of(T);
   static <T> Optional<T> ofNullable(T);
   T get();
   boolean isPresent();
   boolean isEmpty();
   void ifPresent(function.Consumer<? super T>);
   void ifPresentOrElse(function.Consumer<? super T>, java.lang.Runnable);
   Optional<T> filter(function.Predicate<? super T>);
   <U> Optional<U> map(function.Function<? super T, ? extends U>);
   <U> Optional<U> flatMap(function.Function<? super T, ? extends Optional<? extends U>>);
   Optional<T> or(function.Supplier<? extends Optional<? extends T>>);
   stream.Stream<T> stream();
   T orElse(T);
   T orElseGet(function.Supplier<? extends T>);
   T orElseThrow();
   <X extends java.lang.Throwable> T orElseThrow(function.Supplier<? extends X>) throws X;
   boolean equals(java.lang.Object);
   int hashCode();
   java.lang.String toString();
  static {};
}
